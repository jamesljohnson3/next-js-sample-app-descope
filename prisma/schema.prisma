//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="mysql"
    url=env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator js {
    provider = "prisma-client-js"
}

enum SpaceUserRole {
    USER
    ADMIN
}

/// @@deny('all', auth() == null)
/// @@allow('create', true)
/// @@allow('read', members ? [user == auth()])
/// @@allow('update,delete', members ? [user == auth() && role == ADMIN])
model Space {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @length(4, 50)
    name String
    /// @regex('^[0-9a-zA-Z]{4,16}$')
    slug String @unique()
    members SpaceUser[]
    lists List[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

/// @@deny('all', auth() == null)
/// @@allow('create,update,delete', space.members ? [user == auth() && role == ADMIN])
/// @@allow('read', space.members ? [user == auth()])
model SpaceUser {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role SpaceUserRole
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
    @@unique([userId, spaceId])
}

/// @@allow('create', true)
/// @@allow('read', spaces ? [space.members ? [user == auth()]])
/// @@allow('all', auth() == this)
model User {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @email
    email String @unique()
    emailVerified DateTime?
    /// @password
    /// @omit
    password String?
    name String?
    spaces SpaceUser[]
    /// @url
    image String?
    lists List[]
    todos Todo[]
    links Link[]
    projects ProjectUsers[]
    accounts Account[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

model ProjectUsers {
    id String @id() @default(cuid())
    role String @default("member")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    zenstack_guard Boolean @default(true)
    @@unique([userId, projectId])
    @@index([projectId])
}

/// @@deny('all', auth() == null)
/// @@allow('read', owner == auth() || (space.members ? [user == auth()] && !private))
/// @@allow('create', owner == auth() && space.members ? [user == auth()])
/// @@allow('update', owner == auth() && space.members ? [user == auth()] && future().owner == owner)
/// @@allow('delete', owner == auth())
model List {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId String
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    /// @length(1, 100)
    title String
    private Boolean @default(false)
    todos Todo[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

/// @@deny('all', auth() == null)
/// @@allow('all', list.owner == auth())
/// @@allow('all', list.space.members ? [user == auth()] && !list.private)
/// @@deny('update', future().owner != owner)
model Todo {
    id String @id() @default(uuid())
    categories String @default("")
    detail_1 String @default("")
    ref_img String @default("")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    list List @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId String
    /// @length(1, 100)
    title String
    completedAt DateTime?
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

model Account {
    id String @id() @default(uuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    refresh_token_expires_in Int?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    zenstack_guard Boolean @default(true)
    @@unique([provider, providerAccountId])
}

model Link {
    id String @id() @default(cuid())
    domain String
    key String
    url String @db.LongText()
    archived Boolean @default(false)
    expiresAt DateTime?
    password String?
    proxy Boolean @default(false)
    title String?
    description String? @db.VarChar(280)
    image String? @db.LongText()
    utm_source String?
    utm_medium String?
    utm_campaign String?
    utm_term String?
    utm_content String?
    ios String? @db.LongText()
    android String? @db.LongText()
    clicks Int @default(0)
    publicStats Boolean @default(false)
    user User? @relation(fields: [userId], references: [id])
    userId String?
    project Project? @relation(fields: [domain], references: [domain], onUpdate: Cascade, onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    zenstack_guard Boolean @default(true)
    @@unique([domain, key])
    @@index([domain, archived, expiresAt, createdAt(sort: Desc)])
    @@index([domain, archived, expiresAt, clicks(sort: Desc)])
    @@index([domain, archived, expiresAt, userId, createdAt(sort: Desc)])
    @@index([domain, archived, expiresAt, userId, clicks(sort: Desc)])
    @@index([userId])
}

model Project {
    id String @id() @default(cuid())
    name String
    slug String @unique()
    logo String?
    domain String @unique()
    domainVerified Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    users ProjectUsers[]
    invites ProjectInvite[]
    domainLastChecked DateTime @default(now())
    usage Int @default(0)
    ownerUsageLimit Int @default(1000)
    ownerExceededUsage Boolean @default(false)
    links Link[]
    zenstack_guard Boolean @default(true)
}

model ProjectInvite {
    email String
    expires DateTime
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    createdAt DateTime @default(now())
    zenstack_guard Boolean @default(true)
    @@unique([email, projectId])
    @@index([projectId])
}